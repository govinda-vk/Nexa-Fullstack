{
  "info": {
    "name": "ASKit Backend API Collection",
    "description": "Comprehensive API collection for ASKit backend - RAG system with authentication, web crawling, and widget management",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for ASKit backend API"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT authentication token"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string",
      "description": "Current user ID"
    },
    {
      "key": "websiteId",
      "value": "",
      "type": "string",
      "description": "Website ID for testing"
    },
    {
      "key": "widgetId",
      "value": "",
      "type": "string",
      "description": "Widget ID for testing"
    },
    {
      "key": "jobId",
      "value": "",
      "type": "string",
      "description": "Job ID for tracking background processes"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication and registration endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check API health and service status"
          },
          "response": []
        },
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.test('Registration successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.user.email).to.eql('demo@askit.ai');",
                  "        pm.expect(response.token).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Demo User\",\n  \"email\": \"demo@askit.ai\",\n  \"password\": \"DemoPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.user.email).to.eql('demo@askit.ai');",
                  "        pm.expect(response.token).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"demo@askit.ai\",\n  \"password\": \"DemoPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password"
          },
          "response": []
        },
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.expect(response.user).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get current user profile information"
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.user.name).to.eql('Demo User Updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Demo User Updated\",\n  \"bio\": \"Updated bio for demo user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Update user profile information"
          },
          "response": []
        },
        {
          "name": "Google OAuth Initiate",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/google",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "google"]
            },
            "description": "Initiate Google OAuth flow (redirects to Google)"
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout current user"
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "description": "User website and account management endpoints",
      "item": [
        {
          "name": "Get User Websites",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Websites retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.websites).to.be.an('array');",
                  "    pm.expect(response.pagination).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/websites?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["user", "websites"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get paginated list of user websites"
          },
          "response": []
        },
        {
          "name": "Add New Website",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('websiteId', response.website.id);",
                  "    pm.test('Website added successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.website.url).to.eql('https://example.com');",
                  "        pm.expect(response.website.status).to.eql('pending');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Demo Website\",\n  \"url\": \"https://example.com\",\n  \"description\": \"A demo website for testing ASKit functionality\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user/websites",
              "host": ["{{baseUrl}}"],
              "path": ["user", "websites"]
            },
            "description": "Add a new website to user account"
          },
          "response": []
        },
        {
          "name": "Get Website Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Website details retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.website).to.have.property('id');",
                  "    pm.expect(response.website).to.have.property('url');",
                  "    pm.expect(response.website).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/websites/{{websiteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "websites", "{{websiteId}}"]
            },
            "description": "Get detailed information about a specific website"
          },
          "response": []
        },
        {
          "name": "Update Website",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Website updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.website.name).to.eql('Updated Demo Website');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Demo Website\",\n  \"description\": \"Updated description for the demo website\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user/websites/{{websiteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "websites", "{{websiteId}}"]
            },
            "description": "Update website information"
          },
          "response": []
        },
        {
          "name": "Get Website Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Statistics retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.stats).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/websites/{{websiteId}}/stats",
              "host": ["{{baseUrl}}"],
              "path": ["user", "websites", "{{websiteId}}", "stats"]
            },
            "description": "Get detailed statistics for a website"
          },
          "response": []
        },
        {
          "name": "Delete Website",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Website deleted successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/websites/{{websiteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "websites", "{{websiteId}}"]
            },
            "description": "Delete a website and all associated data"
          },
          "response": []
        }
      ]
    },
    {
      "name": "RAG System",
      "description": "Core RAG functionality including ingestion and querying",
      "item": [
        {
          "name": "Start Website Ingestion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 202) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jobId', response.jobId);",
                  "    pm.test('Ingestion started successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.jobId).to.be.a('string');",
                  "        pm.expect(response.message).to.contain('started');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"websiteUrl\": \"https://example.com\",\n  \"maxPages\": 10,\n  \"crawlDelay\": 2000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/ingest",
              "host": ["{{baseUrl}}"],
              "path": ["ingest"]
            },
            "description": "Start crawling and ingesting a website"
          },
          "response": []
        },
        {
          "name": "Query Website Content",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Query processed successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.answer).to.be.a('string');",
                  "    pm.expect(response.sources).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"What is this website about?\",\n  \"websiteUrl\": \"https://example.com\",\n  \"maxResults\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Query ingested website content using RAG"
          },
          "response": []
        },
        {
          "name": "Get Job Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Job status retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.job).to.have.property('status');",
                  "    pm.expect(response.job.status).to.be.oneOf(['pending', 'processing', 'completed', 'failed']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "{{jobId}}"]
            },
            "description": "Get the status and progress of a background job"
          },
          "response": []
        },
        {
          "name": "Get All User Jobs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Jobs retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.jobs).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/jobs?status=all&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "status",
                  "value": "all"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            },
            "description": "Get all jobs for the authenticated user"
          },
          "response": []
        },
        {
          "name": "Cancel Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Job cancelled successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.contain('cancelled');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "{{jobId}}"]
            },
            "description": "Cancel a running background job"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Widget Management",
      "description": "Create and manage embeddable chat widgets",
      "item": [
        {
          "name": "Get User Widgets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Widgets retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.widgets).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/widget?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["widget"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all widgets for the authenticated user"
          },
          "response": []
        },
        {
          "name": "Create New Widget",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('widgetId', response.widget.id);",
                  "    pm.test('Widget created successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.widget.name).to.eql('Demo Widget');",
                  "        pm.expect(response.widget.isActive).to.be.true;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Demo Widget\",\n  \"websiteUrl\": \"https://example.com\",\n  \"config\": {\n    \"theme\": \"auto\",\n    \"position\": \"bottom-right\",\n    \"primaryColor\": \"#8B5CF6\",\n    \"welcomeMessage\": \"Hello! How can I help you today?\",\n    \"placeholder\": \"Ask me anything...\",\n    \"avatar\": \"https://example.com/avatar.png\"\n  },\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/widget",
              "host": ["{{baseUrl}}"],
              "path": ["widget"]
            },
            "description": "Create a new chat widget"
          },
          "response": []
        },
        {
          "name": "Get Widget Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Widget details retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.widget).to.have.property('id');",
                  "    pm.expect(response.widget).to.have.property('config');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/widget/{{widgetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["widget", "{{widgetId}}"]
            },
            "description": "Get detailed information about a specific widget"
          },
          "response": []
        },
        {
          "name": "Update Widget Configuration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Widget updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.widget.config.primaryColor).to.eql('#FF6B6B');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Demo Widget\",\n  \"config\": {\n    \"theme\": \"light\",\n    \"position\": \"bottom-left\",\n    \"primaryColor\": \"#FF6B6B\",\n    \"welcomeMessage\": \"Hi there! Updated welcome message!\",\n    \"placeholder\": \"Type your question here...\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/widget/{{widgetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["widget", "{{widgetId}}"]
            },
            "description": "Update widget configuration and settings"
          },
          "response": []
        },
        {
          "name": "Get Widget Script",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Widget script retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.script).to.contain('<script>');",
                  "    pm.expect(response.script).to.contain('NEXA_WIDGET_CONFIG');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/widget/{{widgetId}}/script",
              "host": ["{{baseUrl}}"],
              "path": ["widget", "{{widgetId}}", "script"]
            },
            "description": "Get embeddable JavaScript code for the widget"
          },
          "response": []
        },
        {
          "name": "Get Widget Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Widget analytics retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.analytics).to.be.an('object');",
                  "    pm.expect(response.analytics).to.have.property('totalChats');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/widget/{{widgetId}}/analytics?period=30d",
              "host": ["{{baseUrl}}"],
              "path": ["widget", "{{widgetId}}", "analytics"],
              "query": [
                {
                  "key": "period",
                  "value": "30d"
                }
              ]
            },
            "description": "Get analytics data for a widget"
          },
          "response": []
        },
        {
          "name": "Toggle Widget Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Widget status toggled successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/widget/{{widgetId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["widget", "{{widgetId}}", "status"]
            },
            "description": "Enable or disable a widget"
          },
          "response": []
        },
        {
          "name": "Delete Widget",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Widget deleted successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/widget/{{widgetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["widget", "{{widgetId}}"]
            },
            "description": "Delete a widget and all associated data"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Widget API (Public)",
      "description": "Public API endpoints for embedded widgets",
      "item": [
        {
          "name": "Initialize Widget",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Widget initialized successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.widget).to.have.property('config');",
                  "    pm.expect(response.sessionId).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Widget-ID",
                "value": "{{widgetId}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/widget/init",
              "host": ["{{baseUrl}}"],
              "path": ["api", "widget", "init"]
            },
            "description": "Initialize widget and get configuration"
          },
          "response": []
        },
        {
          "name": "Send Chat Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.have.property('content');",
                  "    pm.expect(response.message).to.have.property('timestamp');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Widget-ID",
                "value": "{{widgetId}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Hello! What can you tell me about this website?\",\n  \"sessionId\": \"session-123\",\n  \"metadata\": {\n    \"page\": \"https://example.com/about\",\n    \"userAgent\": \"Mozilla/5.0...\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/widget/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "widget", "chat"]
            },
            "description": "Send a chat message through the widget"
          },
          "response": []
        },
        {
          "name": "Get Chat History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Chat history retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Widget-ID",
                "value": "{{widgetId}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/widget/chat/session-123",
              "host": ["{{baseUrl}}"],
              "path": ["api", "widget", "chat", "session-123"]
            },
            "description": "Get chat history for a session"
          },
          "response": []
        },
        {
          "name": "Widget Feedback",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Feedback submitted successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.contain('received');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Widget-ID",
                "value": "{{widgetId}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"messageId\": \"msg-123\",\n  \"rating\": \"positive\",\n  \"feedback\": \"Very helpful response!\",\n  \"sessionId\": \"session-123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/widget/feedback",
              "host": ["{{baseUrl}}"],
              "path": ["api", "widget", "feedback"]
            },
            "description": "Submit feedback for a chat message"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin & Utilities",
      "description": "Administrative and utility endpoints",
      "item": [
        {
          "name": "System Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('System is healthy', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('ok');",
                  "    pm.expect(response.services.mongodb).to.eql('connected');",
                  "    pm.expect(response.services.redis).to.eql('connected');",
                  "    pm.expect(response.services.pinecone).to.eql('connected');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Comprehensive system health check"
          },
          "response": []
        },
        {
          "name": "Get API Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            },
            "description": "Get Prometheus metrics (if enabled)"
          },
          "response": []
        },
        {
          "name": "Search Websites",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Search completed successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.results).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/search?q=example&type=website&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["search"],
              "query": [
                {
                  "key": "q",
                  "value": "example"
                },
                {
                  "key": "type",
                  "value": "website"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Search across user websites and content"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url);",
          "",
          "// Add timestamp to requests",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct Content-Type', function () {",
          "    if (pm.response.headers.get('Content-Type')) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log('Error Response:', pm.response.json());",
          "}"
        ]
      }
    }
  ]
}
